{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "down",
      "outputs": [
        {
          "internalType": "contract RebaseableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochToPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payoutToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochLength_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "multiplier_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplier",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySettlement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ups",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testForEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapFactory",
      "outputs": [
        {
          "internalType": "contract IMinimalUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapPair",
      "outputs": [
        {
          "internalType": "contract IMinimalUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "up",
      "outputs": [
        {
          "internalType": "contract RebaseableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x70A5C9D346416f901826581d423Cd5B92d44Ff5a",
    "contractAddress": "0x4a90f777652baD3aEf8B36B810fc39888127e9f7",
    "transactionIndex": 3,
    "gasUsed": "5354450",
    "logsBloom": "0x
    "blockHash": "0xbd9ee76467c3e5b087e45e3c6830774672b2a7aa2a58fde878a841b2c3c084fa",
    "transactionHash": "0x7f98145a7e54ed6738d9eb8848f3d63b47174159d805c204c871290e7e9d59fc",
    "logs": [],
    "blockNumber": 3493111,
    "cumulativeGasUsed": "6028196",
    "status": 1,
    "byzantium": true
  },
  "address": "0x4a90f777652baD3aEf8B36B810fc39888127e9f7",
  "args": [],
  "solcInputHash": "0x39dc79dea4da8f70268baf6c8cfa7ed870cba029dee3cf1bf97363574805d330",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"down\",\"outputs\":[{\"internalType\":\"contract RebaseableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochToPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochLength_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySettlement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ups\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testForEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IMinimalUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"contract IMinimalUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"up\",\"outputs\":[{\"internalType\":\"contract RebaseableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"settle()\":{\"notice\":\"The user wants out of the pool and so at the end of this epoch we will let them cash out.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/OptionsPool.sol\":\"OptionsPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint256(_data));\\n    }\\n}\\n\",\"keccak256\":\"0x16926b3c19504ea52f73abe41dfa9c1ef9c328d6088b82162d475caecaa47a6d\"},\"contracts/OptionsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RebaseableToken.sol\\\";\\nimport \\\"./interfaces/IPriceOracleGetter.sol\\\";\\nimport './interfaces/IMinimalUniswap.sol';\\n\\n// import \\\"@nomiclabs/buidler/console.sol\\\";\\n\\ncontract OptionsPool {\\n    uint8 constant version  = 0;\\n    using SafeMath for uint256;\\n\\n    struct Settlement {\\n        uint256 ups;\\n        uint256 downs;\\n        uint256 epoch;\\n    }\\n\\n    mapping(address => Settlement) private settlements;\\n\\n    /**\\n        The mapping of the epoch to the ending price;\\n        This is used to calculate the liquidity rewards;\\n     */\\n    mapping(uint256 => uint256) public epochToPrice;\\n\\n    RebaseableToken public up;\\n    RebaseableToken public down;\\n\\n    address private owner;\\n\\n    IPriceOracleGetter public oracle;\\n\\n    /**\\n        This is the price returned by the oracle at the\\n        beginning of thise epoch.\\n     */\\n    uint256 public epochStartPrice;\\n\\n    /**\\n        This is the blockNumber of the start of this epoch\\n     */\\n    uint256 public epochStart;\\n    /**\\n        The current epoch\\n     */\\n    uint256 public epoch = 0;\\n    /**\\n        How many blocks should this epoch last?\\n     */\\n    uint256 public epochLength;\\n\\n    IERC20 public underlying;\\n\\n    /**\\n        The token which ups and downs convert into\\n     */\\n    IERC20 public payoutToken;\\n\\n    IMinimalUniswapV2Factory public uniswapFactory;\\n    IMinimalUniswapV2Pair public uniswapPair;\\n\\n    uint8 public multiplier;\\n\\n    // uint256 public rake = 0; // the amount this pool charges for in percentage as 18 decimal precision integer\\n\\n    modifier isOwner {\\n        require(msg.sender == owner, \\\"UpDown:Only owner\\\");\\n        _;\\n    }\\n\\n    modifier checkEpoch {\\n        if (block.number >= epochStart.add(epochLength)) {\\n            endEpoch();\\n        }\\n        _;\\n    }\\n\\n    modifier requireNoSettlement {\\n        require(\\n            settlements[msg.sender].epoch == 0,\\n            \\\"UpDown:has settlement\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    function testForEnd() public checkEpoch {}\\n\\n    function createUpAndDown()\\n        internal\\n        returns (address upAddr, address downAddr)\\n    {\\n        bytes memory bytecode = type(RebaseableToken).creationCode;\\n        bytes32 upSalt = keccak256(\\n            abi.encodePacked(address(this), int8(0))\\n        );\\n        // console.logBytes32(upSalt);\\n        bytes32 downSalt = keccak256(\\n            abi.encodePacked(address(this), int8(1))\\n        );\\n        upAddr = Create2.deploy(0, upSalt, bytecode);\\n        downAddr = Create2.deploy(0, downSalt, bytecode);\\n\\n        RebaseableToken(upAddr).initialize(\\n            \\\"UpDownUp\\\", \\n            \\\"udUp\\\", \\n            address(this));\\n        RebaseableToken(downAddr).initialize(\\n            \\\"UpDownDown\\\",\\n            \\\"udDn\\\",\\n            address(this)\\n        );\\n        setTokens(upAddr, downAddr);\\n\\n        return (upAddr, downAddr);\\n    }\\n\\n    // following the pattern of uniswap so there can be a pool factory\\n    function initialize(\\n        address owner_,\\n        address payoutToken_,\\n        uint256 epochLength_,\\n        uint8 multiplier_,\\n        address oracle_,\\n        address factory_,\\n        address underlying_\\n    ) public isOwner {\\n        owner = owner_;\\n        payoutToken = IERC20(payoutToken_);\\n        oracle = IPriceOracleGetter(oracle_);\\n        uniswapFactory = IMinimalUniswapV2Factory(factory_);\\n        epochStart = block.number;\\n        epochLength = epochLength_;\\n        multiplier = multiplier_;\\n        underlying = IERC20(underlying_);\\n        epochStartPrice = oracle.getAssetPrice(underlying_);\\n        createUpAndDown();\\n    }\\n\\n    function setTokens(address up_, address down_) internal isOwner {\\n        up = RebaseableToken(up_);\\n        down = RebaseableToken(down_);\\n    }\\n\\n    function setOwner(address newOwner) public isOwner {\\n        owner = newOwner;\\n    }\\n\\n    function mySettlement()\\n        public\\n        view\\n        returns (\\n            uint256 ups,\\n            uint256 downs,\\n            uint256 epochNumber\\n        )\\n    {\\n        Settlement storage settlement = settlements[msg.sender];\\n        // if we're at the zero epoch use that\\n        // else if the settlement epoch is > 0 but the epoch we settled at has not yet passed\\n        // use the one before the settlement\\n        uint256 pricingEpoch = 0;\\n        if (epoch > settlement.epoch) {\\n            pricingEpoch = settlement.epoch;\\n        } else if (settlement.epoch > 0) {\\n            pricingEpoch = settlement.epoch - 1;\\n        }\\n        uint256 upGonsPerFrag = up.epochGonsPerFragment(pricingEpoch);\\n        uint256 downGonsPerFrag = down.epochGonsPerFragment(pricingEpoch);\\n        return (\\n            settlement.ups.div(upGonsPerFrag),\\n            settlement.downs.div(downGonsPerFrag),\\n            settlement.epoch\\n        );\\n    }\\n\\n    /**\\n        calculate the percent change defined as an 18 precision decimal (1e18 is 100%)\\n     */\\n    function percentChangeMax100(uint256 diff, uint256 base)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 percent = (diff * 10**18).mul(10**18).div(base.mul(10**18)).mul(uint256(multiplier));\\n        if (percent >= 10**18) {\\n            percent = uint256(10**18).sub(1);\\n        }\\n        return percent;\\n    }\\n\\n    function endEpoch() internal {\\n        updatePrice(oracle.getAssetPrice(address(underlying)));\\n    }\\n\\n    function updatePrice(uint256 newPrice_) internal {\\n        uint256 currentPrice = epochStartPrice;\\n        uint256 upTotal = up.totalSupply();\\n        uint256 downTotal = down.totalSupply();\\n\\n        bool upIsBigger = upTotal >= downTotal;\\n\\n        if (newPrice_ > currentPrice) {\\n            uint256 diff = newPrice_.sub(currentPrice);\\n            uint256 percent = percentChangeMax100(diff, currentPrice);\\n\\n            // console.log(\\\"percent greater: \\\", percent);\\n\\n            if (upIsBigger) {\\n                // if up is bigger than we want to start by deflating down\\n                // and then adding to ups\\n                uint256 newTokens = downTotal.mul(percent).div(10**18);\\n                uint256 newSupply = down.rebase(epoch, int256(newTokens) * -1);\\n\\n                // console.log(\\n                //     \\\"tokens removed from down: \\\",\\n                //     downTotal.sub(newSupply)\\n                // );\\n\\n                uint256 toAdd = downTotal.sub(newSupply);\\n\\n                up.rebase(epoch, int256(toAdd));\\n            } else {\\n                // the down supply is bigger so increase the ups and then decrease the downs\\n                uint256 newTokens = upTotal.mul(percent).div(10**18);\\n                uint256 newSupply = up.rebase(epoch, int256(newTokens));\\n\\n                uint256 toRemove = newSupply.sub(upTotal);\\n                down.rebase(epoch, int256(toRemove) * -1);\\n            }\\n        } else if (newPrice_ < currentPrice) {\\n            uint256 diff = currentPrice.sub(newPrice_);\\n            uint256 percent = percentChangeMax100(diff, currentPrice);\\n            if (upIsBigger) {\\n                // if up is bigger than we want to start by inflating down\\n                // and then adding to ups\\n                uint256 newTokens = downTotal.mul(percent).div(10**18);\\n                uint256 newSupply = down.rebase(epoch, int256(newTokens));\\n\\n                // console.log(\\\"tokens added to down: \\\", newSupply.sub(downTotal));\\n\\n                uint256 toAdd = newSupply.sub(downTotal);\\n\\n                up.rebase(epoch, int256(toAdd) * -1);\\n            } else {\\n                // the down supply is bigger so decrease the ups and then increase the downs\\n                uint256 newTokens = upTotal.mul(percent).div(10**18);\\n                uint256 newSupply = up.rebase(epoch, int256(newTokens) * -1);\\n\\n                uint256 toRemove = upTotal.sub(newSupply);\\n                down.rebase(epoch, int256(toRemove));\\n            }\\n        } else {\\n            up.rebase(epoch, 0);\\n            down.rebase(epoch, 0);\\n        }\\n        updateUniswap();\\n        epochStartPrice = newPrice_;\\n        epoch++;\\n        epochStart = block.number;\\n        // otherwise the prices are the same and we can just ignore\\n    }\\n\\n    function updateUniswap() internal {\\n        if (address(uniswapFactory) != address(0)) {\\n            if (address(uniswapPair) == address(0)) {\\n                uniswapPair = IMinimalUniswapV2Pair(uniswapFactory.getPair(address(up), address(down)));\\n            }\\n            if (address(uniswapPair) != address(0)) {\\n                uniswapPair.sync();\\n            }\\n        }\\n    }\\n\\n    /**\\n        The user wants out of the pool and so at the end of this epoch we will\\n        let them cash out.\\n     */\\n    function settle() public requireNoSettlement checkEpoch {\\n        settlements[msg.sender].epoch = epoch;\\n        settlements[msg.sender].ups = up.liquidate(msg.sender);\\n        settlements[msg.sender].downs = down.liquidate(msg.sender);\\n        // this effectively locks their account until they call liquidate\\n    }\\n\\n    // TODO: this provides an arbitrage opportunity to withdraw\\n    // before the end of a period. This should be a lockup.\\n    function liquidate() public checkEpoch {\\n        Settlement storage settlement = settlements[msg.sender];\\n        // require that we're liquidating at a higher epoch than it was called;\\n        require(settlement.epoch < epoch, \\\"too early to liquidate\\\");\\n\\n        uint256 upBalance = settlement.ups.div(\\n            up.epochGonsPerFragment(settlement.epoch)\\n        );\\n        uint256 downBalance = settlement.downs.div(\\n            down.epochGonsPerFragment(settlement.epoch)\\n        );\\n\\n        // console.log(settlements[msg.sender].epoch, \\\"upPercent: \\\", upPercent);\\n\\n        uint256 totalBalance = upBalance.add(downBalance);\\n\\n        settlements[msg.sender].ups = 0;\\n        settlements[msg.sender].downs = 0;\\n        settlements[msg.sender].epoch = 0;\\n        // console.log(\\\"pool balance: \\\", payoutToken.balanceOf(address(this)));\\n        // console.log(\\n        //     \\\"liquidating: \\\",\\n        //     totalBalance,\\n        //     \\\"transfering: \\\",\\n        //     totalBalance.div(200)\\n        // );\\n        uint256 totalPayout = totalBalance.div(200);\\n        uint256 fee = totalPayout.div(1000); // 10 basis points fee\\n        uint256 toUser = totalPayout.sub(fee);\\n        require(payoutToken.transfer(msg.sender, toUser));\\n        require(payoutToken.transfer(owner, fee));\\n    }\\n\\n    function deposit(uint256 amount) public requireNoSettlement checkEpoch {\\n        require(payoutToken.transferFrom(msg.sender, address(this), amount));\\n\\n        require(\\n            up.transfer(msg.sender, amount.mul(100)),\\n            \\\"OptionsPool:failed up\\\"\\n        );\\n        require(\\n            down.transfer(msg.sender, amount.mul(100)),\\n            \\\"OptionsPool:failed down\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x023b1186f92ded1576c2aae5ff1b095534ecabfe41668f8564f4f05734daac37\"},\"contracts/RebaseableToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./lib/OverrideableERC20.sol\\\";\\nimport \\\"./lib/SafeMathInt.sol\\\";\\n\\n/**\\n\\nHeavily based on ampleforth with updates to 0.6.0 solidity and percentage change andjustments\\n\\n */\\n/**\\n * @title uFragments ERC20 token\\n * @dev This is part of an implementation of the uFragments Ideal Money protocol.\\n *      uFragments is a normal ERC20 token, but its supply can be adjusted by splitting and\\n *      combining tokens proportionally across all wallets.\\n *\\n *      uFragment balances are internally represented with a hidden denomination, 'gons'.\\n *      We support splitting the currency in expansion and combining the currency on contraction by\\n *      changing the exchange rate between the hidden 'gons' and the public 'fragments'.\\n */\\ncontract RebaseableToken is OverrideableERC20, Ownable {\\n    // PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\\n    // Anytime there is division, there is a risk of numerical instability from rounding errors. In\\n    // order to minimize this risk, we adhere to the following guidelines:\\n    // 1) The conversion rate adopted is the number of gons that equals 1 fragment.\\n    //    The inverse rate must not be used--TOTAL_GONS is always the numerator and _totalSupply is\\n    //    always the denominator. (i.e. If you want to convert gons to fragments instead of\\n    //    multiplying by the inverse rate, you should divide by the normal rate)\\n    // 2) Gon balances converted into Fragments are always rounded down (truncated).\\n    //\\n    // We make the following guarantees:\\n    // - If address 'A' transfers x Fragments to address 'B'. A's resulting external balance will\\n    //   be decreased by precisely x Fragments, and B's external balance will be precisely\\n    //   increased by x Fragments.\\n    //\\n    // We do not guarantee that the sum of all balances equals the result of calling totalSupply().\\n    // This is because, for any conversion function 'f()' that has non-zero rounding error,\\n    // f(x0) + f(x1) + ... + f(xn) is not always equal to f(x0 + x1 + ... xn).\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\n    event LogLiquidation(address who, uint256 gons);\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0));\\n        require(to != address(this));\\n        _;\\n    }\\n\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**18 * 10**18; // basically the pool maxes out at this number of tokens 10^18 tokens * 10^18 decimals\\n\\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\\n    // Use the highest value that fits in a uint256 for max granularity.\\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\\n    uint256 private constant MAX_SUPPLY = ~uint128(0);  // (2^128) - 1\\n\\n    uint256 private _totalSupply;\\n    uint256 private _gonsPerFragment;\\n    mapping(address => uint256) private _gonBalances;\\n\\n    mapping(uint256 => uint256) public epochGonsPerFragment;\\n\\n    // This is denominated in Fragments, because the gons-fragments conversion might change before\\n    // it's fully paid.\\n    mapping (address => mapping (address => uint256)) private _allowedFragments;\\n\\n    /**\\n     * @dev Notifies Fragments contract about a new rebase cycle.\\n     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\\n     * @return The total number of fragments after the supply adjustment.\\n     */\\n    function rebase(uint256 epoch, int256 supplyDelta)\\n        external\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        if (supplyDelta == 0) {\\n            emit LogRebase(epoch, _totalSupply);\\n            epochGonsPerFragment[epoch] = _gonsPerFragment;\\n            return _totalSupply;\\n        }\\n\\n        if (supplyDelta < 0) {\\n            _totalSupply = _totalSupply.sub(uint256(supplyDelta.abs()));\\n        } else {\\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\\n        }\\n\\n        if (_totalSupply > MAX_SUPPLY) {\\n            _totalSupply = MAX_SUPPLY;\\n        }\\n\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n        epochGonsPerFragment[epoch] = _gonsPerFragment;\\n\\n        // From this point forward, _gonsPerFragment is taken as the source of truth.\\n        // We recalculate a new _totalSupply to be in agreement with the _gonsPerFragment\\n        // conversion rate.\\n        // This means our applied supplyDelta can deviate from the requested supplyDelta,\\n        // but this deviation is guaranteed to be < (_totalSupply^2)/(TOTAL_GONS - _totalSupply).\\n        //\\n        // In the case of _totalSupply <= MAX_UINT128 (our current supply cap), this\\n        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\\n        // ever increased, it must be re-included.\\n        // XXX: UpDown adds this back in:\\n        _totalSupply = TOTAL_GONS.div(_gonsPerFragment);\\n\\n        emit LogRebase(epoch, _totalSupply);\\n        return _totalSupply;\\n    }\\n\\n    /**\\n        Liquidate returns the *gons* that were liquidated so that\\n        the future value can be calculated.\\n     */\\n    function liquidate(address who) public onlyOwner returns (uint256) {\\n        uint256 balance = _gonBalances[who];\\n        _gonBalances[who] = 0;\\n        _gonBalances[owner()] = _gonBalances[owner()].add(balance);\\n\\n        emit LogLiquidation(who, balance);\\n        return balance;\\n    }\\n\\n\\n    function initialize(string memory name, string memory symbol, address operator_) onlyOwner public {\\n        setName(name);\\n        setSymbol(symbol);\\n\\n        uint256 balance = _gonBalances[owner()];\\n        _gonBalances[owner()] = 0;\\n        _gonBalances[operator_] = _gonBalances[operator_].add(balance);\\n\\n        epochGonsPerFragment[0] = _gonsPerFragment;\\n\\n        transferOwnership(operator_);\\n    }\\n\\n    constructor() public OverrideableERC20() {\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        _gonBalances[msg.sender] = TOTAL_GONS;\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\\n    }\\n\\n    /**\\n     * @return The total number of fragments.\\n     */\\n    function totalSupply()\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @param who The address to query.\\n     * @return The balance of the specified address.\\n     */\\n    function balanceOf(address who)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _gonBalances[who].div(_gonsPerFragment);\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param to The address to transfer to.\\n     * @param value The amount to be transferred.\\n     * @return True on success, false otherwise.\\n     */\\n    function transfer(address to, uint256 value)\\n        public\\n        override\\n        validRecipient(to)\\n        returns (bool)\\n    {\\n        uint256 gonValue = value.mul(_gonsPerFragment);\\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\\n        emit Transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\\n     * @param owner_ The address which owns the funds.\\n     * @param spender The address which will spend the funds.\\n     * @return The number of tokens still available for the spender.\\n     */\\n    function allowance(address owner_, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowedFragments[owner_][spender];\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param from The address you want to send tokens from.\\n     * @param to The address you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        validRecipient(to)\\n        override\\n        returns (bool)\\n    {\\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value);\\n\\n        uint256 gonValue = value.mul(_gonsPerFragment);\\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\\n     * msg.sender. This method is included for ERC20 compatibility.\\n     * increaseAllowance and decreaseAllowance should be used instead.\\n     * Changing an allowance with this method brings the risk that someone may transfer both\\n     * the old and the new allowance - if they are both greater than zero - if a transfer\\n     * transaction is mined before the later approve() call is mined.\\n     *\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to a spender.\\n     * This method should be used instead of approve() to avoid the double approval vulnerability\\n     * described above.\\n     * @param spender The address which will spend the funds.\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][spender] =\\n            _allowedFragments[msg.sender][spender].add(addedValue);\\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\\n     *\\n     * @param spender The address which will spend the funds.\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedFragments[msg.sender][spender] = 0;\\n        } else {\\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\\n        }\\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x47347d874fceee1914c1cb7c1b4e2904c5edc266a009a1c66be62384c019c5a5\"},\"contracts/interfaces/IMinimalUniswap.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IMinimalUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IMinimalUniswapV2Pair {\\n    function sync() external;\\n}\",\"keccak256\":\"0x7d7d6a676cb34b60ab13b9d067caf27293c0a3f39a8af553a28c2a30b14c07af\"},\"contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/************\\n@title IPriceOracleGetter interface\\n@notice Interface for the Aave price oracle.*/\\ninterface IPriceOracleGetter {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\",\"keccak256\":\"0x02c2a08011f12beff68980cb6aeecc9eaf592337ddc37b5baf89e4b68882ad8f\"},\"contracts/lib/OverrideableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract OverrideableERC20 is Context {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n\\n\\n     Adjusted for UpDown to not require the name/symbol until inialization\\n     */\\n    constructor () public {\\n        _decimals = 18;\\n    }\\n\\n    function setName(string memory name) public {\\n        _name = name;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function setSymbol(string memory symbol) public {\\n        _symbol = symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\",\"keccak256\":\"0x2f724d21a06f3a981c5e36c3601ea4fda9f98082550309d84038d8f23546a832\"},\"contracts/lib/SafeMathInt.sol\":{\"content\":\"/*\\nMIT License\\nCopyright (c) 2018 requestnetwork\\nCopyright (c) 2018 Fragments, Inc.\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity ^0.6.0;\\n\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n}\",\"keccak256\":\"0x2872b5807f7923f28d1aa2fd3d194b37a804ec631b971e6f12779047bba00250\"}},\"version\":1}",
  "bytecode": "0x6080604052600060085534801561001557600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550615fc6806100666000396000f3fe60806040523480156200001157600080fd5b5060043610620001125760003560e01c806311da60b4146200011757806313af4035146200012357806315e5a1e5146200016a5780631b3ed722146200018a57806328a0702514620001b05780634efa82b614620001bc57806357d775f814620002085780636f307dc31462000228578063713df9e814620002745780637dc0d1d014620002805780638334109414620002cc5780638471de9214620003aa57806384be9a8314620003ef5780638bdb2afa146200040f578063900cf0cf146200045b578063b6b55f25146200047b578063c1ca4a4a14620004ac578063c816841b14620004da578063d5a49e011462000526578063d83379281462000572575b600080fd5b62000121620005be565b005b62000168600480360360208110156200013b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000933565b005b6200017462000a3b565b6040518082815260200191505060405180910390f35b6200019462000a41565b604051808260ff1660ff16815260200191505060405180910390f35b620001ba62000a54565b005b620001c662001028565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620002126200104e565b6040518082815260200191505060405180910390f35b6200023262001054565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200027e6200107a565b005b6200028a620010a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620003a8600480360360e0811015620002e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620010cd565b005b620003d960048036036020811015620003c257600080fd5b8101908080359060200190929190505050620013f7565b6040518082815260200191505060405180910390f35b620003f96200140f565b6040518082815260200191505060405180910390f35b6200041962001415565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620004656200143b565b6040518082815260200191505060405180910390f35b620004aa600480360360208110156200049357600080fd5b810190808035906020019092919050505062001441565b005b620004b66200192a565b60405180848152602001838152602001828152602001935050505060405180910390f35b620004e462001b5b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200053062001b81565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200057c62001ba7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541462000676576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5570446f776e3a68617320736574746c656d656e74000000000000000000000081525060200191505060405180910390fd5b6200068f60095460075462001bcd90919063ffffffff16565b4310620006a157620006a062001c56565b5b6008546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f865568336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156200078b57600080fd5b505af1158015620007a0573d6000803e3d6000fd5b505050506040513d6020811015620007b757600080fd5b81019080805190602001909291905050506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f865568336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015620008af57600080fd5b505af1158015620008c4573d6000803e3d6000fd5b505050506040513d6020811015620008db57600080fd5b81019080805190602001909291905050506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5570446f776e3a4f6e6c79206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60075481565b600d60149054906101000a900460ff1681565b62000a6d60095460075462001bcd90919063ffffffff16565b431062000a7f5762000a7e62001c56565b5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060085481600201541062000b3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f746f6f206561726c7920746f206c69717569646174650000000000000000000081525060200191505060405180910390fd5b600062000c0c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e22084600201546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000bbb57600080fd5b505afa15801562000bd0573d6000803e3d6000fd5b505050506040513d602081101562000be757600080fd5b8101908080519060200190929190505050836000015462001d6190919063ffffffff16565b9050600062000cdd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e22085600201546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000c8c57600080fd5b505afa15801562000ca1573d6000803e3d6000fd5b505050506040513d602081101562000cb857600080fd5b8101908080519060200190929190505050846001015462001d6190919063ffffffff16565b9050600062000cf6828462001bcd90919063ffffffff16565b905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600062000de560c88362001d6190919063ffffffff16565b9050600062000e006103e88362001d6190919063ffffffff16565b9050600062000e19828462001dad90919063ffffffff16565b9050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000ec557600080fd5b505af115801562000eda573d6000803e3d6000fd5b505050506040513d602081101562000ef157600080fd5b810190808051906020019092919050505062000f0c57600080fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000fd857600080fd5b505af115801562000fed573d6000803e3d6000fd5b505050506040513d60208110156200100457600080fd5b81019080805190602001909291905050506200101f57600080fd5b50505050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6200109360095460075462001bcd90919063ffffffff16565b4310620010a557620010a462001c56565b5b565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001191576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5570446f776e3a4f6e6c79206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b86600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550436007819055508460098190555083600d60146101000a81548160ff021916908360ff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3596f07826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156200139f57600080fd5b505afa158015620013b4573d6000803e3d6000fd5b505050506040513d6020811015620013cb57600080fd5b8101908080519060200190929190505050600681905550620013ec62001df9565b505050505050505050565b60016020528060005260406000206000915090505481565b60065481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414620014f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5570446f776e3a68617320736574746c656d656e74000000000000000000000081525060200191505060405180910390fd5b6200151260095460075462001bcd90919063ffffffff16565b431062001524576200152362001c56565b5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156200160257600080fd5b505af115801562001617573d6000803e3d6000fd5b505050506040513d60208110156200162e57600080fd5b81019080805190602001909291905050506200164957600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336200169e6064856200214d90919063ffffffff16565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200170857600080fd5b505af11580156200171d573d6000803e3d6000fd5b505050506040513d60208110156200173457600080fd5b8101908080519060200190929190505050620017b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f7074696f6e73506f6f6c3a6661696c6564207570000000000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336200180d6064856200214d90919063ffffffff16565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200187757600080fd5b505af11580156200188c573d6000803e3d6000fd5b505050506040513d6020811015620018a357600080fd5b810190808051906020019092919050505062001927576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4f7074696f6e73506f6f6c3a6661696c656420646f776e00000000000000000081525060200191505060405180910390fd5b50565b6000806000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080905081600201546008541115620019915781600201549050620019ab565b600082600201541115620019aa57600182600201540390505b5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e220836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562001a2157600080fd5b505afa15801562001a36573d6000803e3d6000fd5b505050506040513d602081101562001a4d57600080fd5b810190808051906020019092919050505090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e220846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562001ad657600080fd5b505afa15801562001aeb573d6000803e3d6000fd5b505050506040513d602081101562001b0257600080fd5b8101908080519060200190929190505050905062001b2e82856000015462001d6190919063ffffffff16565b62001b4782866001015462001d6190919063ffffffff16565b856002015496509650965050505050909192565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082840190508381101562001c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b62001d5f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3596f07600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801562001d1c57600080fd5b505afa15801562001d31573d6000803e3d6000fd5b505050506040513d602081101562001d4857600080fd5b8101908080519060200190929190505050620021d8565b565b600062001da583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525062002d44565b905092915050565b600062001df183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062002e0f565b905092915050565b60008060606040518060200162001e1090620035a3565b6020820181038252601f19601f8201166040525090506000306000604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018260000b60000b60f81b8152600101925050506040516020818303038152906040528051906020012090506000306001604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018260000b60000b60f81b81526001019250505060405160208183030381529060405280519060200120905062001f0c6000838562002ed3565b945062001f1c6000828562002ed3565b93508473ffffffffffffffffffffffffffffffffffffffff1663077f224a306040518263ffffffff1660e01b81526004018080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835260088152602001807f5570446f776e5570000000000000000000000000000000000000000000000000815250602001838103825260048152602001807f75645570000000000000000000000000000000000000000000000000000000008152506020019350505050600060405180830381600087803b1580156200201057600080fd5b505af115801562002025573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663077f224a306040518263ffffffff1660e01b81526004018080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600a8152602001807f5570446f776e446f776e00000000000000000000000000000000000000000000815250602001838103825260048152602001807f7564446e000000000000000000000000000000000000000000000000000000008152506020019350505050600060405180830381600087803b1580156200211b57600080fd5b505af115801562002130573d6000803e3d6000fd5b5050505062002140858562003080565b8484945094505050509091565b600080831415620021625760009050620021d2565b60008284029050828482816200217457fe5b0414620021cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018062005f706021913960400191505060405180910390fd5b809150505b92915050565b600060065490506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200224a57600080fd5b505afa1580156200225f573d6000803e3d6000fd5b505050506040513d60208110156200227657600080fd5b810190808051906020019092919050505090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620022f457600080fd5b505afa15801562002309573d6000803e3d6000fd5b505050506040513d60208110156200232057600080fd5b81019080805190602001909291905050509050600081831015905083851115620027675760006200235b858762001dad90919063ffffffff16565b905060006200236b8287620031ca565b905082156200256c576000620023a7670de0b6b3a76400006200239884886200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200244d57600080fd5b505af115801562002462573d6000803e3d6000fd5b505050506040513d60208110156200247957600080fd5b810190808051906020019092919050505090506000620024a3828862001dad90919063ffffffff16565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854836040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200252557600080fd5b505af11580156200253a573d6000803e3d6000fd5b505050506040513d60208110156200255157600080fd5b8101908080519060200190929190505050505050506200275f565b60006200259f670de0b6b3a76400006200259084896200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854846040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200262357600080fd5b505af115801562002638573d6000803e3d6000fd5b505050506040513d60208110156200264f57600080fd5b81019080805190602001909291905050509050600062002679888362001dad90919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200271d57600080fd5b505af115801562002732573d6000803e3d6000fd5b505050506040513d60208110156200274957600080fd5b8101908080519060200190929190505050505050505b505062002d13565b8385101562002b9357600062002787868662001dad90919063ffffffff16565b90506000620027978287620031ca565b9050821562002998576000620027d3670de0b6b3a7640000620027c484886200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854846040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200285757600080fd5b505af11580156200286c573d6000803e3d6000fd5b505050506040513d60208110156200288357600080fd5b810190808051906020019092919050505090506000620028ad878362001dad90919063ffffffff16565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200295157600080fd5b505af115801562002966573d6000803e3d6000fd5b505050506040513d60208110156200297d57600080fd5b81019080805190602001909291905050505050505062002b8b565b6000620029cb670de0b6b3a7640000620029bc84896200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002a7157600080fd5b505af115801562002a86573d6000803e3d6000fd5b505050506040513d602081101562002a9d57600080fd5b81019080805190602001909291905050509050600062002ac7828962001dad90919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854836040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002b4957600080fd5b505af115801562002b5e573d6000803e3d6000fd5b505050506040513d602081101562002b7557600080fd5b8101908080519060200190929190505050505050505b505062002d12565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f60085460006040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002c1457600080fd5b505af115801562002c29573d6000803e3d6000fd5b505050506040513d602081101562002c4057600080fd5b810190808051906020019092919050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f60085460006040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002cd357600080fd5b505af115801562002ce8573d6000803e3d6000fd5b505050506040513d602081101562002cff57600080fd5b8101908080519060200190929190505050505b5b62002d1d6200327f565b84600681905550600860008154809291906001019190505550436007819055505050505050565b6000808311829062002df4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562002db857808201518184015260208101905062002d9b565b50505050905090810190601f16801562002de65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858162002e0157fe5b049050809150509392505050565b600083831115829062002ec0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562002e8457808201518184015260208101905062002e67565b50505050905090810190601f16801562002eb25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808447101562002f4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f437265617465323a20696e73756666696369656e742062616c616e636500000081525060200191505060405180910390fd5b60008351141562002fc6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f437265617465323a2062797465636f6465206c656e677468206973207a65726f81525060200191505060405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562003075576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f437265617465323a204661696c6564206f6e206465706c6f790000000000000081525060200191505060405180910390fd5b809150509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462003144576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5570446f776e3a4f6e6c79206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008062003242600d60149054906101000a900460ff1660ff166200323362003205670de0b6b3a7640000876200214d90919063ffffffff16565b62003224670de0b6b3a7640000808a026200214d90919063ffffffff16565b62001d6190919063ffffffff16565b6200214d90919063ffffffff16565b9050670de0b6b3a764000081106200327557620032726001670de0b6b3a764000062001dad90919063ffffffff16565b90505b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620035a157600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620034c457600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a43905600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156200344657600080fd5b505afa1580156200345b573d6000803e3d6000fd5b505050506040513d60208110156200347257600080fd5b8101908080519060200190929190505050600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620035a057600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200358657600080fd5b505af11580156200359b573d6000803e3d6000fd5b505050505b5b565b6129be80620035b28339019056fe60806040523480156200001157600080fd5b506012600560006101000a81548160ff021916908360ff1602179055506000620000406200020760201b60201c565b905080600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506ec097ce7bc90715b34b9f10000000006006819055506ec097ce7bc90715b34b9f1000000000600019816200011057fe5b0660001903600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001936006546ec097ce7bc90715b34b9f1000000000600019816200017a57fe5b06600019036200020f60201b620023621790919060201c565b6007819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a36200032c565b600033905090565b60006200025983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200026160201b60201c565b905092915050565b6000808311829062000311576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620002d5578082015181840152602081019050620002b8565b50505050905090810190601f168015620003035780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200031e57fe5b049050809150509392505050565b612682806200033c6000396000f3fe608060405234801561001057600080fd5b50600436106100fc5760003560e01c806306fdde0314610101578063077f224a14610184578063095ea7b3146102f657806318160ddd1461035c57806323b872dd1461037a5780632f86556814610400578063313ce56714610458578063395093511461047c57806370a08231146104e2578063715018a61461053a5780637a43e23f146105445780638da5cb5b1461059057806395d89b41146105da578063a457c2d71461065d578063a9059cbb146106c3578063b84c824614610729578063c47f0027146107e4578063dd62ed3e1461089f578063dff4e22014610917578063f2fde38b14610959575b600080fd5b61010961099d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f46004803603606081101561019a57600080fd5b81019080803590602001906401000000008111156101b757600080fd5b8201836020820111156101c957600080fd5b803590602001918460018302840111640100000000831117156101eb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561024e57600080fd5b82018360208201111561026057600080fd5b8035906020019184600183028401116401000000008311171561028257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a3f565b005b6103426004803603604081101561030c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c70565b604051808215151515815260200191505060405180910390f35b610364610d62565b6040518082815260200191505060405180910390f35b6103e66004803603606081101561039057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d6c565b604051808215151515815260200191505060405180910390f35b6104426004803603602081101561041657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a6565b6040518082815260200191505060405180910390f35b610460611312565b604051808260ff1660ff16815260200191505060405180910390f35b6104c86004803603604081101561049257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611329565b604051808215151515815260200191505060405180910390f35b610524600480360360208110156104f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611525565b6040518082815260200191505060405180910390f35b610542611582565b005b61057a6004803603604081101561055a57600080fd5b81019080803590602001909291908035906020019092919050505061170d565b6040518082815260200191505060405180910390f35b610598611999565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105e26119c3565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610622578082015181840152602081019050610607565b50505050905090810190601f16801561064f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106a96004803603604081101561067357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a65565b604051808215151515815260200191505060405180910390f35b61070f600480360360408110156106d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cf5565b604051808215151515815260200191505060405180910390f35b6107e26004803603602081101561073f57600080fd5b810190808035906020019064010000000081111561075c57600080fd5b82018360208201111561076e57600080fd5b8035906020019184600183028401116401000000008311171561079057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f1f565b005b61089d600480360360208110156107fa57600080fd5b810190808035906020019064010000000081111561081757600080fd5b82018360208201111561082957600080fd5b8035906020019184600183028401116401000000008311171561084b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f39565b005b610901600480360360408110156108b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f53565b6040518082815260200191505060405180910390f35b6109436004803603602081101561092d57600080fd5b8101908080359060200190929190505050611fda565b6040518082815260200191505060405180910390f35b61099b6004803603602081101561096f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ff2565b005b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a355780601f10610a0a57610100808354040283529160200191610a35565b820191906000526020600020905b815481529060010190602001808311610a1857829003601f168201915b5050505050905090565b610a47612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610b1283611f39565b610b1b82611f1f565b600060086000610b29611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060086000610b74611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c0481600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506007546009600080815260200190815260200160002081905550610c6a82611ff2565b50505050565b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600654905090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610da957600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610de257600080fd5b610e7183600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229290919063ffffffff16565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610f08600754856122dc90919063ffffffff16565b9050610f5c81600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229290919063ffffffff16565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ff181600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b60006110b0612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611172576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611254816008600061120b611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b60086000611260611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f05aeea22582abbfdbc7681fd1d04fa2fe248c0f77e3734a766e0e431f5f92c2a8382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a180915050919050565b6000600560009054906101000a900460ff16905090565b60006113ba82600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600061157b600754600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461236290919063ffffffff16565b9050919050565b61158a612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461164c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000611717612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600082141561184057827f72725a3b1e5bd622d6bcd1339bb31279c351abe8f541ac7fd320f24e1b1641f26006546040518082815260200191505060405180910390a260075460096000858152602001908152602001600020819055506006549050611993565b600082121561187157611866611855836123ac565b60065461229290919063ffffffff16565b60068190555061188d565b6118868260065461220a90919063ffffffff16565b6006819055505b6000196fffffffffffffffffffffffffffffffff1660065411156118c7576000196fffffffffffffffffffffffffffffffff166006819055505b6118fa6006546ec097ce7bc90715b34b9f1000000000600019816118e757fe5b066000190361236290919063ffffffff16565b600781905550600754600960008581526020019081526020016000208190555061194d6007546ec097ce7bc90715b34b9f10000000006000198161193a57fe5b066000190361236290919063ffffffff16565b600681905550827f72725a3b1e5bd622d6bcd1339bb31279c351abe8f541ac7fd320f24e1b1641f26006546040518082815260200191505060405180910390a260065490505b92915050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a5b5780601f10611a3057610100808354040283529160200191611a5b565b820191906000526020600020905b815481529060010190602001808311611a3e57829003601f168201915b5050505050905090565b600080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808310611b75576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c09565b611b88838261229290919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d3257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d6b57600080fd5b6000611d82600754856122dc90919063ffffffff16565b9050611dd681600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229290919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e6b81600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b8060049080519060200190611f35929190612560565b5050565b8060039080519060200190611f4f929190612560565b5050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60096020528060005260406000206000915090505481565b611ffa612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612142576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806126066026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600080828401905083811015612288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60006122d483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506123da565b905092915050565b6000808314156122ef576000905061235c565b600082840290508284828161230057fe5b0414612357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061262c6021913960400191505060405180910390fd5b809150505b92915050565b60006123a483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061249a565b905092915050565b600060ff6001901b8214156123c057600080fd5b600082126123ce57816123d3565b816000035b9050919050565b6000838311158290612487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561244c578082015181840152602081019050612431565b50505050905090810190601f1680156124795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008083118290612546576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561250b5780820151818401526020810190506124f0565b50505050905090810190601f1680156125385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161255257fe5b049050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106125a157805160ff19168380011785556125cf565b828001600101855582156125cf579182015b828111156125ce5782518255916020019190600101906125b3565b5b5090506125dc91906125e0565b5090565b61260291905b808211156125fe5760008160009055506001016125e6565b5090565b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202ebf2c139a7139189836f4dc593468b919ea467980dcf6be3911c626554debdd64736f6c63430006060033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207b2ad8fede56ae566a65cc1e0f2eac39a0dfc6ee270529956d10b8aa4c7f628a64736f6c63430006060033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001125760003560e01c806311da60b4146200011757806313af4035146200012357806315e5a1e5146200016a5780631b3ed722146200018a57806328a0702514620001b05780634efa82b614620001bc57806357d775f814620002085780636f307dc31462000228578063713df9e814620002745780637dc0d1d014620002805780638334109414620002cc5780638471de9214620003aa57806384be9a8314620003ef5780638bdb2afa146200040f578063900cf0cf146200045b578063b6b55f25146200047b578063c1ca4a4a14620004ac578063c816841b14620004da578063d5a49e011462000526578063d83379281462000572575b600080fd5b62000121620005be565b005b62000168600480360360208110156200013b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000933565b005b6200017462000a3b565b6040518082815260200191505060405180910390f35b6200019462000a41565b604051808260ff1660ff16815260200191505060405180910390f35b620001ba62000a54565b005b620001c662001028565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620002126200104e565b6040518082815260200191505060405180910390f35b6200023262001054565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200027e6200107a565b005b6200028a620010a7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620003a8600480360360e0811015620002e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620010cd565b005b620003d960048036036020811015620003c257600080fd5b8101908080359060200190929190505050620013f7565b6040518082815260200191505060405180910390f35b620003f96200140f565b6040518082815260200191505060405180910390f35b6200041962001415565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620004656200143b565b6040518082815260200191505060405180910390f35b620004aa600480360360208110156200049357600080fd5b810190808035906020019092919050505062001441565b005b620004b66200192a565b60405180848152602001838152602001828152602001935050505060405180910390f35b620004e462001b5b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200053062001b81565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200057c62001ba7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541462000676576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5570446f776e3a68617320736574746c656d656e74000000000000000000000081525060200191505060405180910390fd5b6200068f60095460075462001bcd90919063ffffffff16565b4310620006a157620006a062001c56565b5b6008546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f865568336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156200078b57600080fd5b505af1158015620007a0573d6000803e3d6000fd5b505050506040513d6020811015620007b757600080fd5b81019080805190602001909291905050506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f865568336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015620008af57600080fd5b505af1158015620008c4573d6000803e3d6000fd5b505050506040513d6020811015620008db57600080fd5b81019080805190602001909291905050506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5570446f776e3a4f6e6c79206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60075481565b600d60149054906101000a900460ff1681565b62000a6d60095460075462001bcd90919063ffffffff16565b431062000a7f5762000a7e62001c56565b5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060085481600201541062000b3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f746f6f206561726c7920746f206c69717569646174650000000000000000000081525060200191505060405180910390fd5b600062000c0c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e22084600201546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000bbb57600080fd5b505afa15801562000bd0573d6000803e3d6000fd5b505050506040513d602081101562000be757600080fd5b8101908080519060200190929190505050836000015462001d6190919063ffffffff16565b9050600062000cdd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e22085600201546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562000c8c57600080fd5b505afa15801562000ca1573d6000803e3d6000fd5b505050506040513d602081101562000cb857600080fd5b8101908080519060200190929190505050846001015462001d6190919063ffffffff16565b9050600062000cf6828462001bcd90919063ffffffff16565b905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600062000de560c88362001d6190919063ffffffff16565b9050600062000e006103e88362001d6190919063ffffffff16565b9050600062000e19828462001dad90919063ffffffff16565b9050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000ec557600080fd5b505af115801562000eda573d6000803e3d6000fd5b505050506040513d602081101562000ef157600080fd5b810190808051906020019092919050505062000f0c57600080fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801562000fd857600080fd5b505af115801562000fed573d6000803e3d6000fd5b505050506040513d60208110156200100457600080fd5b81019080805190602001909291905050506200101f57600080fd5b50505050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6200109360095460075462001bcd90919063ffffffff16565b4310620010a557620010a462001c56565b5b565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001191576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5570446f776e3a4f6e6c79206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b86600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550436007819055508460098190555083600d60146101000a81548160ff021916908360ff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3596f07826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156200139f57600080fd5b505afa158015620013b4573d6000803e3d6000fd5b505050506040513d6020811015620013cb57600080fd5b8101908080519060200190929190505050600681905550620013ec62001df9565b505050505050505050565b60016020528060005260406000206000915090505481565b60065481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414620014f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5570446f776e3a68617320736574746c656d656e74000000000000000000000081525060200191505060405180910390fd5b6200151260095460075462001bcd90919063ffffffff16565b431062001524576200152362001c56565b5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156200160257600080fd5b505af115801562001617573d6000803e3d6000fd5b505050506040513d60208110156200162e57600080fd5b81019080805190602001909291905050506200164957600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336200169e6064856200214d90919063ffffffff16565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200170857600080fd5b505af11580156200171d573d6000803e3d6000fd5b505050506040513d60208110156200173457600080fd5b8101908080519060200190929190505050620017b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f7074696f6e73506f6f6c3a6661696c6564207570000000000000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336200180d6064856200214d90919063ffffffff16565b6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156200187757600080fd5b505af11580156200188c573d6000803e3d6000fd5b505050506040513d6020811015620018a357600080fd5b810190808051906020019092919050505062001927576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4f7074696f6e73506f6f6c3a6661696c656420646f776e00000000000000000081525060200191505060405180910390fd5b50565b6000806000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600080905081600201546008541115620019915781600201549050620019ab565b600082600201541115620019aa57600182600201540390505b5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e220836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562001a2157600080fd5b505afa15801562001a36573d6000803e3d6000fd5b505050506040513d602081101562001a4d57600080fd5b810190808051906020019092919050505090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dff4e220846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562001ad657600080fd5b505afa15801562001aeb573d6000803e3d6000fd5b505050506040513d602081101562001b0257600080fd5b8101908080519060200190929190505050905062001b2e82856000015462001d6190919063ffffffff16565b62001b4782866001015462001d6190919063ffffffff16565b856002015496509650965050505050909192565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008082840190508381101562001c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b62001d5f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3596f07600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801562001d1c57600080fd5b505afa15801562001d31573d6000803e3d6000fd5b505050506040513d602081101562001d4857600080fd5b8101908080519060200190929190505050620021d8565b565b600062001da583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525062002d44565b905092915050565b600062001df183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062002e0f565b905092915050565b60008060606040518060200162001e1090620035a3565b6020820181038252601f19601f8201166040525090506000306000604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018260000b60000b60f81b8152600101925050506040516020818303038152906040528051906020012090506000306001604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018260000b60000b60f81b81526001019250505060405160208183030381529060405280519060200120905062001f0c6000838562002ed3565b945062001f1c6000828562002ed3565b93508473ffffffffffffffffffffffffffffffffffffffff1663077f224a306040518263ffffffff1660e01b81526004018080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835260088152602001807f5570446f776e5570000000000000000000000000000000000000000000000000815250602001838103825260048152602001807f75645570000000000000000000000000000000000000000000000000000000008152506020019350505050600060405180830381600087803b1580156200201057600080fd5b505af115801562002025573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663077f224a306040518263ffffffff1660e01b81526004018080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600a8152602001807f5570446f776e446f776e00000000000000000000000000000000000000000000815250602001838103825260048152602001807f7564446e000000000000000000000000000000000000000000000000000000008152506020019350505050600060405180830381600087803b1580156200211b57600080fd5b505af115801562002130573d6000803e3d6000fd5b5050505062002140858562003080565b8484945094505050509091565b600080831415620021625760009050620021d2565b60008284029050828482816200217457fe5b0414620021cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018062005f706021913960400191505060405180910390fd5b809150505b92915050565b600060065490506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200224a57600080fd5b505afa1580156200225f573d6000803e3d6000fd5b505050506040513d60208110156200227657600080fd5b810190808051906020019092919050505090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620022f457600080fd5b505afa15801562002309573d6000803e3d6000fd5b505050506040513d60208110156200232057600080fd5b81019080805190602001909291905050509050600081831015905083851115620027675760006200235b858762001dad90919063ffffffff16565b905060006200236b8287620031ca565b905082156200256c576000620023a7670de0b6b3a76400006200239884886200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200244d57600080fd5b505af115801562002462573d6000803e3d6000fd5b505050506040513d60208110156200247957600080fd5b810190808051906020019092919050505090506000620024a3828862001dad90919063ffffffff16565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854836040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200252557600080fd5b505af11580156200253a573d6000803e3d6000fd5b505050506040513d60208110156200255157600080fd5b8101908080519060200190929190505050505050506200275f565b60006200259f670de0b6b3a76400006200259084896200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854846040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200262357600080fd5b505af115801562002638573d6000803e3d6000fd5b505050506040513d60208110156200264f57600080fd5b81019080805190602001909291905050509050600062002679888362001dad90919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200271d57600080fd5b505af115801562002732573d6000803e3d6000fd5b505050506040513d60208110156200274957600080fd5b8101908080519060200190929190505050505050505b505062002d13565b8385101562002b9357600062002787868662001dad90919063ffffffff16565b90506000620027978287620031ca565b9050821562002998576000620027d3670de0b6b3a7640000620027c484886200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854846040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200285757600080fd5b505af11580156200286c573d6000803e3d6000fd5b505050506040513d60208110156200288357600080fd5b810190808051906020019092919050505090506000620028ad878362001dad90919063ffffffff16565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b1580156200295157600080fd5b505af115801562002966573d6000803e3d6000fd5b505050506040513d60208110156200297d57600080fd5b81019080805190602001909291905050505050505062002b8b565b6000620029cb670de0b6b3a7640000620029bc84896200214d90919063ffffffff16565b62001d6190919063ffffffff16565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f6008547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85026040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002a7157600080fd5b505af115801562002a86573d6000803e3d6000fd5b505050506040513d602081101562002a9d57600080fd5b81019080805190602001909291905050509050600062002ac7828962001dad90919063ffffffff16565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f600854836040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002b4957600080fd5b505af115801562002b5e573d6000803e3d6000fd5b505050506040513d602081101562002b7557600080fd5b8101908080519060200190929190505050505050505b505062002d12565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f60085460006040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002c1457600080fd5b505af115801562002c29573d6000803e3d6000fd5b505050506040513d602081101562002c4057600080fd5b810190808051906020019092919050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a43e23f60085460006040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b15801562002cd357600080fd5b505af115801562002ce8573d6000803e3d6000fd5b505050506040513d602081101562002cff57600080fd5b8101908080519060200190929190505050505b5b62002d1d6200327f565b84600681905550600860008154809291906001019190505550436007819055505050505050565b6000808311829062002df4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562002db857808201518184015260208101905062002d9b565b50505050905090810190601f16801562002de65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858162002e0157fe5b049050809150509392505050565b600083831115829062002ec0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562002e8457808201518184015260208101905062002e67565b50505050905090810190601f16801562002eb25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000808447101562002f4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f437265617465323a20696e73756666696369656e742062616c616e636500000081525060200191505060405180910390fd5b60008351141562002fc6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f437265617465323a2062797465636f6465206c656e677468206973207a65726f81525060200191505060405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562003075576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f437265617465323a204661696c6564206f6e206465706c6f790000000000000081525060200191505060405180910390fd5b809150509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462003144576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5570446f776e3a4f6e6c79206f776e657200000000000000000000000000000081525060200191505060405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008062003242600d60149054906101000a900460ff1660ff166200323362003205670de0b6b3a7640000876200214d90919063ffffffff16565b62003224670de0b6b3a7640000808a026200214d90919063ffffffff16565b62001d6190919063ffffffff16565b6200214d90919063ffffffff16565b9050670de0b6b3a764000081106200327557620032726001670de0b6b3a764000062001dad90919063ffffffff16565b90505b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620035a157600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620034c457600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a43905600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156200344657600080fd5b505afa1580156200345b573d6000803e3d6000fd5b505050506040513d60208110156200347257600080fd5b8101908080519060200190929190505050600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620035a057600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200358657600080fd5b505af11580156200359b573d6000803e3d6000fd5b505050505b5b565b6129be80620035b28339019056fe60806040523480156200001157600080fd5b506012600560006101000a81548160ff021916908360ff1602179055506000620000406200020760201b60201c565b905080600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506ec097ce7bc90715b34b9f10000000006006819055506ec097ce7bc90715b34b9f1000000000600019816200011057fe5b0660001903600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001936006546ec097ce7bc90715b34b9f1000000000600019816200017a57fe5b06600019036200020f60201b620023621790919060201c565b6007819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040518082815260200191505060405180910390a36200032c565b600033905090565b60006200025983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200026160201b60201c565b905092915050565b6000808311829062000311576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620002d5578082015181840152602081019050620002b8565b50505050905090810190601f168015620003035780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200031e57fe5b049050809150509392505050565b612682806200033c6000396000f3fe608060405234801561001057600080fd5b50600436106100fc5760003560e01c806306fdde0314610101578063077f224a14610184578063095ea7b3146102f657806318160ddd1461035c57806323b872dd1461037a5780632f86556814610400578063313ce56714610458578063395093511461047c57806370a08231146104e2578063715018a61461053a5780637a43e23f146105445780638da5cb5b1461059057806395d89b41146105da578063a457c2d71461065d578063a9059cbb146106c3578063b84c824614610729578063c47f0027146107e4578063dd62ed3e1461089f578063dff4e22014610917578063f2fde38b14610959575b600080fd5b61010961099d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f46004803603606081101561019a57600080fd5b81019080803590602001906401000000008111156101b757600080fd5b8201836020820111156101c957600080fd5b803590602001918460018302840111640100000000831117156101eb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561024e57600080fd5b82018360208201111561026057600080fd5b8035906020019184600183028401116401000000008311171561028257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a3f565b005b6103426004803603604081101561030c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c70565b604051808215151515815260200191505060405180910390f35b610364610d62565b6040518082815260200191505060405180910390f35b6103e66004803603606081101561039057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d6c565b604051808215151515815260200191505060405180910390f35b6104426004803603602081101561041657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110a6565b6040518082815260200191505060405180910390f35b610460611312565b604051808260ff1660ff16815260200191505060405180910390f35b6104c86004803603604081101561049257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611329565b604051808215151515815260200191505060405180910390f35b610524600480360360208110156104f857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611525565b6040518082815260200191505060405180910390f35b610542611582565b005b61057a6004803603604081101561055a57600080fd5b81019080803590602001909291908035906020019092919050505061170d565b6040518082815260200191505060405180910390f35b610598611999565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105e26119c3565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610622578082015181840152602081019050610607565b50505050905090810190601f16801561064f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106a96004803603604081101561067357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a65565b604051808215151515815260200191505060405180910390f35b61070f600480360360408110156106d957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cf5565b604051808215151515815260200191505060405180910390f35b6107e26004803603602081101561073f57600080fd5b810190808035906020019064010000000081111561075c57600080fd5b82018360208201111561076e57600080fd5b8035906020019184600183028401116401000000008311171561079057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f1f565b005b61089d600480360360208110156107fa57600080fd5b810190808035906020019064010000000081111561081757600080fd5b82018360208201111561082957600080fd5b8035906020019184600183028401116401000000008311171561084b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611f39565b005b610901600480360360408110156108b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f53565b6040518082815260200191505060405180910390f35b6109436004803603602081101561092d57600080fd5b8101908080359060200190929190505050611fda565b6040518082815260200191505060405180910390f35b61099b6004803603602081101561096f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ff2565b005b606060038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a355780601f10610a0a57610100808354040283529160200191610a35565b820191906000526020600020905b815481529060010190602001808311610a1857829003601f168201915b5050505050905090565b610a47612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b610b1283611f39565b610b1b82611f1f565b600060086000610b29611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060086000610b74611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c0481600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506007546009600080815260200190815260200160002081905550610c6a82611ff2565b50505050565b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600654905090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610da957600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610de257600080fd5b610e7183600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229290919063ffffffff16565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000610f08600754856122dc90919063ffffffff16565b9050610f5c81600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229290919063ffffffff16565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ff181600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b60006110b0612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611172576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611254816008600061120b611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b60086000611260611999565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f05aeea22582abbfdbc7681fd1d04fa2fe248c0f77e3734a766e0e431f5f92c2a8382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a180915050919050565b6000600560009054906101000a900460ff16905090565b60006113ba82600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600061157b600754600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461236290919063ffffffff16565b9050919050565b61158a612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461164c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000611717612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600082141561184057827f72725a3b1e5bd622d6bcd1339bb31279c351abe8f541ac7fd320f24e1b1641f26006546040518082815260200191505060405180910390a260075460096000858152602001908152602001600020819055506006549050611993565b600082121561187157611866611855836123ac565b60065461229290919063ffffffff16565b60068190555061188d565b6118868260065461220a90919063ffffffff16565b6006819055505b6000196fffffffffffffffffffffffffffffffff1660065411156118c7576000196fffffffffffffffffffffffffffffffff166006819055505b6118fa6006546ec097ce7bc90715b34b9f1000000000600019816118e757fe5b066000190361236290919063ffffffff16565b600781905550600754600960008581526020019081526020016000208190555061194d6007546ec097ce7bc90715b34b9f10000000006000198161193a57fe5b066000190361236290919063ffffffff16565b600681905550827f72725a3b1e5bd622d6bcd1339bb31279c351abe8f541ac7fd320f24e1b1641f26006546040518082815260200191505060405180910390a260065490505b92915050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a5b5780601f10611a3057610100808354040283529160200191611a5b565b820191906000526020600020905b815481529060010190602001808311611a3e57829003601f168201915b5050505050905090565b600080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808310611b75576000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c09565b611b88838261229290919063ffffffff16565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d3257600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d6b57600080fd5b6000611d82600754856122dc90919063ffffffff16565b9050611dd681600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461229290919063ffffffff16565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e6b81600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461220a90919063ffffffff16565b600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b8060049080519060200190611f35929190612560565b5050565b8060039080519060200190611f4f929190612560565b5050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60096020528060005260406000206000915090505481565b611ffa612202565b73ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612142576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806126066026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600080828401905083811015612288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60006122d483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506123da565b905092915050565b6000808314156122ef576000905061235c565b600082840290508284828161230057fe5b0414612357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061262c6021913960400191505060405180910390fd5b809150505b92915050565b60006123a483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061249a565b905092915050565b600060ff6001901b8214156123c057600080fd5b600082126123ce57816123d3565b816000035b9050919050565b6000838311158290612487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561244c578082015181840152602081019050612431565b50505050905090810190601f1680156124795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60008083118290612546576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561250b5780820151818401526020810190506124f0565b50505050905090810190601f1680156125385780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161255257fe5b049050809150509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106125a157805160ff19168380011785556125cf565b828001600101855582156125cf579182015b828111156125ce5782518255916020019190600101906125b3565b5b5090506125dc91906125e0565b5090565b61260291905b808211156125fe5760008160009055506001016125e6565b5090565b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202ebf2c139a7139189836f4dc593468b919ea467980dcf6be3911c626554debdd64736f6c63430006060033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207b2ad8fede56ae566a65cc1e0f2eac39a0dfc6ee270529956d10b8aa4c7f628a64736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "settle()": {
        "notice": "The user wants out of the pool and so at the end of this epoch we will let them cash out."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2749,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "settlements",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Settlement)2745_storage)"
      },
      {
        "astId": 2753,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "epochToPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2755,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "up",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(RebaseableToken)4363"
      },
      {
        "astId": 2757,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "down",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(RebaseableToken)4363"
      },
      {
        "astId": 2759,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2761,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "oracle",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPriceOracleGetter)5161"
      },
      {
        "astId": 2763,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "epochStartPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2765,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "epochStart",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2768,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "epoch",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2770,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "epochLength",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2772,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "underlying",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)985"
      },
      {
        "astId": 2774,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "payoutToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)985"
      },
      {
        "astId": 2776,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "uniswapFactory",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IMinimalUniswapV2Factory)5146"
      },
      {
        "astId": 2778,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "uniswapPair",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IMinimalUniswapV2Pair)5150"
      },
      {
        "astId": 2780,
        "contract": "contracts/OptionsPool.sol:OptionsPool",
        "label": "multiplier",
        "offset": 20,
        "slot": "13",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)985": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMinimalUniswapV2Factory)5146": {
        "encoding": "inplace",
        "label": "contract IMinimalUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IMinimalUniswapV2Pair)5150": {
        "encoding": "inplace",
        "label": "contract IMinimalUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracleGetter)5161": {
        "encoding": "inplace",
        "label": "contract IPriceOracleGetter",
        "numberOfBytes": "20"
      },
      "t_contract(RebaseableToken)4363": {
        "encoding": "inplace",
        "label": "contract RebaseableToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Settlement)2745_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OptionsPool.Settlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Settlement)2745_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Settlement)2745_storage": {
        "encoding": "inplace",
        "label": "struct OptionsPool.Settlement",
        "members": [
          {
            "astId": 2740,
            "contract": "contracts/OptionsPool.sol:OptionsPool",
            "label": "ups",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2742,
            "contract": "contracts/OptionsPool.sol:OptionsPool",
            "label": "downs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2744,
            "contract": "contracts/OptionsPool.sol:OptionsPool",
            "label": "epoch",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "4903600",
      "executionCost": "31674",
      "totalCost": "4935274"
    },
    "external": {
      "deposit(uint256)": "infinite",
      "down()": "1449",
      "epoch()": "1291",
      "epochLength()": "1115",
      "epochStart()": "1027",
      "epochStartPrice()": "1247",
      "epochToPrice(uint256)": "1383",
      "initialize(address,address,uint256,uint8,address,address,address)": "infinite",
      "liquidate()": "infinite",
      "multiplier()": "1147",
      "mySettlement()": "infinite",
      "oracle()": "1229",
      "payoutToken()": "1141",
      "setOwner(address)": "21971",
      "settle()": "infinite",
      "testForEnd()": "infinite",
      "underlying()": "1185",
      "uniswapFactory()": "1317",
      "uniswapPair()": "1405",
      "up()": "1427"
    },
    "internal": {
      "createUpAndDown()": "infinite",
      "endEpoch()": "infinite",
      "percentChangeMax100(uint256,uint256)": "infinite",
      "setTokens(address,address)": "infinite",
      "updatePrice(uint256)": "infinite",
      "updateUniswap()": "infinite"
    }
  }
}